<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Framework</name>
    </assembly>
    <members>
        <member name="T:Framework.Base.DontManager`1">
            <summary>
            单利类型的基类(切换场景时单利不会被清楚)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Framework.Base.DontManager`1.GetManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Framework.Base.DontManager`1.Managers">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Base.DontManager`1.OnAwake">
            <summary>
            使用OnAwake代替Awake
            </summary>
        </member>
        <member name="M:Framework.Base.DontManager`1.Init">
            <summary>
            初始化信息在Awake之后调用
            </summary>
        </member>
        <member name="T:Framework.Base.Manager`1">
            <summary>
            单利类型的基类（切换场景时单利会被初始化）
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Framework.Base.Manager`1.GetManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Framework.Base.Manager`1.Managers">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.Base.Manager`1.OnDestroy">
            <summary>
            在继承中实现该方法可避免初始化
            </summary>
        </member>
        <member name="M:Framework.Base.Manager`1.OnAwake">
            <summary>
            使用OnAwake代替Awake
            </summary>
        </member>
        <member name="M:Framework.Base.Manager`1.Init">
            <summary>
            初始化信息在Awake之后调用
            </summary>
        </member>
        <member name="T:Framework.Event.EventClass">
            <summary>
            事件类
            </summary>
        </member>
        <member name="F:Framework.Event.EventClass.m_Type">
            <summary>
            事件类型
            </summary>
        </member>
        <member name="F:Framework.Event.EventClass.CallBack">
            <summary>
            事件回调
            </summary>
        </member>
        <member name="T:Framework.Event.AbstractEvent`2">
            <summary>
            事件管理基类
            </summary>
            <typeparam name="TEventHead"></typeparam>
            <typeparam name="TEvent"></typeparam>
        </member>
        <member name="M:Framework.Event.AbstractEvent`2.RigistEvent(`1)">
            <summary>
            注册信息
            </summary>
            <param name="varEvent"></param>
        </member>
        <member name="M:Framework.Event.AbstractEvent`2.UnregistEvent(`1)">
            <summary>
            解除注册
            </summary>
            <param name="varEvent"></param>
        </member>
        <member name="M:Framework.Event.AbstractEvent`2.TriggerEvent``1(``0)">
            <summary>
            事件通知
            </summary>
            <typeparam name="T"></typeparam>
            <param name="varEvent"></param>
        </member>
        <member name="M:Framework.Event.AbstractEvent`2.CallEventDelegate(`0,`1)">
            <summary>
            执行回调
            </summary>
            <param name="varhead"></param>
            <param name="varevent"></param>
        </member>
        <member name="T:Framework.Help.Helper">
            <summary>
            帮助工具
            </summary>
        </member>
        <member name="M:Framework.Help.Helper.SaveFile(System.String,System.Byte[])">
            <summary>
            存储文件
                当文件夹路径不存在时会自动创建文件夹
            </summary>
            <param name="path">存储路径</param>
            <param name="date">储存数据</param>
            <returns>存储文件成功或失败</returns>
        </member>
        <member name="M:Framework.Help.Helper.FileExists(System.String)">
            <summary>
            判断文件是否存在
            </summary>
            <param name="varPath">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Help.Helper.GetComponent``1(UnityEngine.Transform)">
            <summary>
            从物体的上级(父级)查找组件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="var_Tran"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Help.Helper.GetGames(UnityEngine.Transform)">
            <summary>
            获取物体下的所有子集（不包含子集的子集）
            </summary>
            <param name="varTran"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Help.Helper.SetActive(UnityEngine.GameObject,System.Boolean,System.String)">
            <summary>
            设置物体的状态
            </summary>
            <param name="varGame"></param>
            <param name="path"></param>
            <param name="activeSelf"></param>
        </member>
        <member name="M:Framework.Help.Helper.NewGameObject(System.String,UnityEngine.GameObject,System.String)">
            <summary>
            创建物体
            </summary>
            <param name="varName">物体的名称</param>
            <param name="varParent">物体的父级</param>
            <param name="varLayer">物体的标签层级</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Help.Helper.NewGameObject``1(System.String,UnityEngine.GameObject,System.String)">
            <summary>
            创建物体并挂载脚本
            </summary>
            <typeparam name="T">挂载的脚本类型</typeparam>
            <param name="varName">物体的名称</param>
            <param name="varParent">物体的父级</param>
            <param name="varLayer">物体的标签层级</param>
            <returns></returns>
        </member>
        <member name="M:Framework.Help.Helper.LoadXml``1(System.String,``0@)">
            <summary>
            解析Xml文件
            * ===============================
            * Xml文件的编写结构
            * 
            * ===============================
            * <!--<?xml version="1.0"?>
            * <LogoXmlList>
            *   <LogoXmlinfo id="1" png="one"	/>
            *   <LogoXmlinfo id="2" png="two"	/>
            * </LogoXmlList>
            * -->
            </summary>
            <typeparam name="T">
            * ===============================================
            * Xml用于解析的函数编写结构
            *          数据值用 属性变量编写
            * 如下为Xml解析结构的编写示例
            * ===============================================
            * public class LogoXmlinfo
            * {
            *     [XmlAttribute(AttributeName = "id")]
            *     public string id { set; get; }
            *     [XmlAttribute(AttributeName = "png")]
            *     public string Png { set; get; }
            * }
            * [XmlRoot("LogoXmlList")]
            * public class LogoXmlList
            * {
            *     [XmlElement("LogoXmlinfo")]
            *     public LogoXmlinfo[] Ins { set; get; }
            * }
            * ===============================================
            </typeparam>
            <param name="path"></param>
            <param name="ms"></param>
        </member>
        <member name="M:Framework.Help.Helper.LoadJson``1(System.String)">
            <summary>
            解析Json文件
            * ===============================
            * Json文件的编写结构
            * 
            * ===============================
            </summary>
            <typeparam name="T">
            * Json用于解析的函数编写结构
            * 数据值用 值变量编写不可用属性变量
            * 如下为Json解析结构的编写示例
            * =============================================
            *  public class JsonNotice
            *  {
            *      public string success;
            *      public string text;
            *  }
            * ============================================= 
            </typeparam>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Help.Helper.Number(System.UInt32)">
            <summary>
            将数字转换成中文
            </summary>
            <param name="varNum"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Manager.GlobalEventManager">
            <summary>
            永久性事件管理器（切换场景时不会被清理）
            </summary>
        </member>
        <member name="P:Framework.Manager.GlobalEventManager.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:Framework.Manager.GlobalEventManager.RigistEvent``1(System.Action{``0})">
            <summary>
            添加事件监听
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Manager.GlobalEventManager.UnrigistEvent``1(System.Action{``0})">
            <summary>
            解除事件监听
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callback"></param>
        </member>
        <member name="M:Framework.Manager.GlobalEventManager.CallEventDelegate(Framework.Manager.GlobalEventHead,Framework.Manager.GlobalEventManager.GlobalEvent)">
            <summary>
            事件广播回调
            </summary>
            <param name="varhead"></param>
            <param name="varevent"></param>
        </member>
        <member name="T:Framework.Manager.GlobalEventManager.GlobalEvent">
            <summary>
            事件类
            </summary>
        </member>
        <member name="T:Framework.Manager.GlobalEventHead">
            <summary>
            事件定义必须继承该类(用作传输数据内容)
            </summary>
        </member>
        <member name="T:Framework.Manager.CurrentSceneEventManager">
            <summary>
            临时的事件管理器（切换场景时事件会被清空）
            </summary>
        </member>
        <member name="P:Framework.Manager.CurrentSceneEventManager.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:Framework.Manager.CurrentSceneEventManager.RigistEvent``1(System.Action{``0})">
            <summary>
            添加事件监听
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Manager.CurrentSceneEventManager.UnrigistEvent``1(System.Action{``0})">
            <summary>
            解除事件监听
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callback"></param>
        </member>
        <member name="M:Framework.Manager.CurrentSceneEventManager.CallEventDelegate(Framework.Manager.CurrentEventHead,Framework.Manager.CurrentSceneEventManager.CurrentEvent)">
            <summary>
            事件广播回调
            </summary>
            <param name="varhead"></param>
            <param name="varevent"></param>
        </member>
        <member name="T:Framework.Manager.CurrentSceneEventManager.CurrentEvent">
            <summary>
            事件类
            </summary>
        </member>
        <member name="T:Framework.Manager.CurrentEventHead">
            <summary>
            事件定义必须继承该类(用作传输数据内容)
            </summary>
        </member>
        <member name="T:Framework.Manager.WindowsManager">
            <summary>
            窗口管理器（挂载在窗口上时可手动设置配置信息）
            
            持久化问题:挂载时可手动设置（默认为持久化状态）
            
            相机画布:挂载时可手动设置是否使用特殊相机（默认为使用）
            
            </summary>
        </member>
        <member name="F:Framework.Manager.WindowsManager.m_Canvas">
            <summary>
            画布（挂载在窗口上时需要手动设置）
            </summary>
        </member>
        <member name="F:Framework.Manager.WindowsManager.m_EventSystem">
            <summary>
            画布的响应信息
            </summary>
        </member>
        <member name="F:Framework.Manager.WindowsManager.m_Camera">
            <summary>
            相机
            </summary>
        </member>
        <member name="F:Framework.Manager.WindowsManager.m_Mask">
            <summary>
            遮挡蒙版
            </summary>
        </member>
        <member name="F:Framework.Manager.WindowsManager.m_WastWindows">
            <summary>
            废弃窗口
            </summary>
        </member>
        <member name="F:Framework.Manager.WindowsManager.m_OpenWindows">
            <summary>
            打开窗口
            </summary>
        </member>
        <member name="F:Framework.Manager.WindowsManager.IsDontDestroyOnLoad">
            <summary>
            设置窗口是否持久化
            </summary>
        </member>
        <member name="F:Framework.Manager.WindowsManager.IsPeculiarCamera">
            <summary>
            设置使用特殊相机
            </summary>
        </member>
        <member name="M:Framework.Manager.WindowsManager.OnAwake">
            <summary>
            OnAwake代替Awake，在Awake之后Start之前调用
            </summary>
        </member>
        <member name="M:Framework.Manager.WindowsManager.Init">
            <summary>
            窗口初始化，在OnAwake之后Start之前调用
            </summary>
        </member>
        <member name="M:Framework.Manager.WindowsManager.CameraInit(UnityEngine.GameObject)">
            <summary>
            相机的初始化
            </summary>
        </member>
        <member name="M:Framework.Manager.WindowsManager.CanvasInit">
            <summary>
            画布初始化
            </summary>
        </member>
        <member name="M:Framework.Manager.WindowsManager.EventSystemInit">
            <summary>
            画布的响应事件初始化
            </summary>
        </member>
        <member name="M:Framework.Manager.WindowsManager.WindowsInit">
            <summary>
            存放信息初始化
            </summary>
        </member>
        <member name="T:Framework.Manager.WindowsManager.Windows">
            <summary>
            窗口信息
            </summary>
        </member>
        <member name="F:Framework.Manager.WindowsManager.Windows.m_WindowType">
            <summary>
            窗口类型
            </summary>
        </member>
        <member name="F:Framework.Manager.WindowsManager.Windows.m_Windows">
            <summary>
            窗口的示例
            </summary>
        </member>
        <member name="F:Framework.Manager.WindowsManager.Windows.m_IsMask">
            <summary>
            窗口是否有蒙版
            </summary>
        </member>
        <member name="F:Framework.Manager.WindowsManager.Windows.m_IsLevel">
            <summary>
            窗口是否参与层数计算
            </summary>
        </member>
        <member name="T:Framework.Manager.LanguageManager">
            <summary>
            语言文字管理
            * ===========================================================
            * 文本的有效格式 Text Key = Value;
            * Txt文本的编码格式必须为UTF-8的编码格式
            *      key 于 Value 形成键值对的格式
            *      key中不能有空格的出现
            *      key值只能有字母数字和下划线构成
            *      Value 值的前后不可有空格
            *      Value 值使用[]
            * ===========================================================
            </summary>
        </member>
        <member name="T:Framework.Manager.LanguageManager.LanguageType">
            <summary>
            语言类型
            </summary>
        </member>
        <member name="F:Framework.Manager.LanguageManager.LanguageType.Chinese">
            <summary>
            中文
            </summary>
        </member>
        <member name="F:Framework.Manager.LanguageManager.LanguageType.English">
            <summary>
            英文
            </summary>
        </member>
        <member name="F:Framework.Manager.LanguageManager.LanguageType.Korean">
            <summary>
            韩文
            </summary>
        </member>
        <member name="F:Framework.Manager.LanguageManager.LanguageType.Japanese">
            <summary>
            日文
            </summary>
        </member>
        <member name="F:Framework.Manager.LanguageManager.LanguageType.German">
            <summary>
            德文
            </summary>
        </member>
        <member name="F:Framework.Manager.LanguageManager.LanguageType.Tibetan">
            <summary>
            藏文
            </summary>
        </member>
        <member name="F:Framework.Manager.LanguageManager.LanguageType.Russian">
            <summary>
            俄文
            </summary>
        </member>
        <member name="F:Framework.Manager.LanguageManager.LanguageType.Spanish">
            <summary>
            西班牙文
            </summary>
        </member>
        <member name="F:Framework.Manager.LanguageManager.LanguageType.Other">
            <summary>
            其他语言
            </summary>
        </member>
        <member name="M:Framework.Manager.LanguageManager.GetValueToKey(System.String)">
            <summary>
            获取值
            </summary>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Manager.LanguageManager.GetValueToKeys(System.String[])">
            <summary>
            获取值
            </summary>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Manager.LanguageManager.Add(System.Action)">
            <summary>
            添加语言切换回调
            </summary>
            <param name="action"></param>
        </member>
        <member name="P:Framework.Manager.LanguageManager.Setting_LanguageType">
            <summary>
            切换语言
            </summary>
        </member>
        <member name="M:Framework.Manager.LanguageManager.Init(Framework.Manager.LanguageManager.Language[])">
            <summary>
            初始化语言包
            </summary>
            <param name="language"></param>
        </member>
        <member name="F:Framework.Manager.LanguageManager.Dic_Language">
            <summary>
            语言字典
            </summary>
        </member>
        <member name="M:Framework.Manager.LanguageManager.ReadTextAsset(UnityEngine.TextAsset,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            读取Txt文本
            </summary>
            <param name="varTextAsset"></param>
            <param name="varDic"></param>
        </member>
        <member name="M:Framework.Manager.LanguageManager.RemovedNullString(System.String[])">
            <summary>
            移除数组中无效的字符串
            </summary>
            <param name="varContent"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Manager.LanguageManager.TestingKeyLegal(System.String@)">
            <summary>
            检测Key的合法性
            </summary>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Manager.LanguageManager.TestingValueLegal(System.String)">
            <summary>
            检测Value值的合法性
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.Manager.LanguageManager.ClearSpilth(System.String)">
            <summary>
            移除多余的字符
            </summary>
            <param name="varValue"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.Manager.LanguageManager.Language">
            <summary>
            语言结构
            </summary>
        </member>
        <member name="F:Framework.Manager.LanguageManager.Language.m_Type">
            <summary>
            语言类型
            </summary>
        </member>
        <member name="F:Framework.Manager.LanguageManager.Language.m_Txt">
            <summary>
            语言文本
            </summary>
        </member>
        <member name="T:Framework.UI.HelpText">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.UI.HelpText.text">
            <summary>
            文本内容
            </summary>
        </member>
        <member name="F:Framework.UI.HelpText.m_Color">
            <summary>
            字体颜色
            </summary>
        </member>
        <member name="F:Framework.UI.HelpText.m_Type">
            <summary>
            文本类型
            </summary>
        </member>
        <member name="F:Framework.UI.HelpText.Isfloat">
            <summary>
            金币类型是否采用浮点数显示
            </summary>
        </member>
        <member name="P:Framework.UI.HelpText.m_text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="M:Framework.UI.HelpText.PasswordText">
            <summary>
            密码文字
            </summary>
        </member>
        <member name="M:Framework.UI.HelpText.TextText">
            <summary>
            文本文字
            </summary>
        </member>
        <member name="M:Framework.UI.HelpText.NameText">
            <summary>
            昵称文字
            </summary>
        </member>
        <member name="M:Framework.UI.HelpText.MoneyText">
            <summary>
            金币文字
            </summary>
        </member>
        <member name="T:Framework.UI.HelpText.Type">
            <summary>
            文本类型
            </summary>
        </member>
        <member name="F:Framework.UI.HelpText.Type.Null">
            <summary>
            默认
            显示最原本的Text不做任何修改
            </summary>
        </member>
        <member name="F:Framework.UI.HelpText.Type.Password">
            <summary>
            密码
            使用*代替字符且最多显示6个*
            </summary>
        </member>
        <member name="F:Framework.UI.HelpText.Type.Text">
            <summary>
            文本
            超出文本框的内容用...显示
            </summary>
        </member>
        <member name="F:Framework.UI.HelpText.Type.Name">
            <summary>
            昵称
            只会显示一行多出的字体用...显示
            </summary>
        </member>
        <member name="F:Framework.UI.HelpText.Type.Money">
            <summary>
            金币
            只显示数字且会显示..万或..亿
            采用浮点数是会保留两位小数
            </summary>
        </member>
        <member name="T:Framework.UI.HelpTxtValueToKey">
            <summary>
            根据Key值获取其对应的Value值与LanguageManager联合使用
            </summary>
        </member>
        <member name="F:Framework.UI.HelpTxtValueToKey.m_Content">
            <summary>
            
            </summary>
        </member>
        <member name="M:Framework.UI.HelpTxtValueToKey.SettingKey(System.String)">
            <summary>
            设置Key值并更新Value
            </summary>
            <param name="varKey"></param>
        </member>
        <member name="T:Framework.UI.TextSpacing">
            <summary>
            字间距修改工具
            不支持Text中的alignment的横向对其修改
            Text的lineSpacing必须大于0.675或者小于-0.675
            </summary>
        </member>
        <member name="F:Framework.UI.TextSpacing._Text_Spacing">
            <summary>
            字间距
            </summary>
        </member>
        <member name="F:Framework.UI.TextSpacing.m_Everyword">
            <summary>
            每个字的顶点数
            </summary>
        </member>
        <member name="M:Framework.UI.TextSpacing.ModifyMesh(UnityEngine.UI.VertexHelper)">
            <summary>
            
            </summary>
            <param name="vh"></param>
        </member>
        <member name="M:Framework.UI.TextSpacing.IsLine(System.Single,System.Single,System.Single)">
            <summary>
            判断是否换行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.UI.TextSpacing.SettingEveryword(System.Collections.Generic.List{UnityEngine.UIVertex},System.Int32,System.Int32)">
            <summary>
            设置每个字体信息
            </summary>
            <param name="vertexList"></param>
            <param name="curridx">该字符位于该行的第几个字符</param>
            <param name="idx">该字符的初始顶点数</param>
        </member>
        <member name="T:Framework.UI.Gradient">
            <summary>
            设置颜色的上下渐变
            </summary>
        </member>
        <member name="F:Framework.UI.Gradient.topColor">
            <summary>
            上边的颜色
            </summary>
        </member>
        <member name="F:Framework.UI.Gradient.bottomColor">
            <summary>
            下边的颜色
            </summary>
        </member>
        <member name="F:Framework.UI.Gradient.m_Whole">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.UI.Gradient.m_Everyword">
            <summary>
            每个字的顶点数
            </summary>
        </member>
        <member name="M:Framework.UI.Gradient.ModifyMesh(UnityEngine.UI.VertexHelper)">
            <summary>
            
            </summary>
            <param name="vh"></param>
        </member>
        <member name="M:Framework.UI.Gradient.SettingEveryword(System.Collections.Generic.List{UnityEngine.UIVertex},System.Single,System.Single,System.Int32)">
            <summary>
            设置每个字的颜色信息
            </summary>
        </member>
        <member name="M:Framework.UI.Gradient.SettingWholeWord(System.Collections.Generic.List{UnityEngine.UIVertex},System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            设置整体的颜色
            </summary>
            <param name="vertexList"></param>
            <param name="topY"></param>
            <param name="bottomY"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="T:Framework.UI.Gradient.Whole">
            <summary>
            整体性
            </summary>
        </member>
        <member name="F:Framework.UI.Gradient.Whole.Every">
            <summary>
            单个字体
            </summary>
        </member>
        <member name="F:Framework.UI.Gradient.Whole.Whole">
            <summary>
            整体
            </summary>
        </member>
    </members>
</doc>
